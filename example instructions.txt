// R-type
000000_00000_00001_00010_00000_000010  // add r2 = r0 + r1 = 1 + 1 = 2
000000_00010_00001_00011_00000_000110  // sub r3 = r2 - r1 = 2 - 1 = 1
000000_00010_00011_00100_00000_000001  // or  r4 = r2 | r3 = 2 | 1 = 3
000000_00011_00100_00101_00000_000000  // and r5 = r3 & r4 = 1 & 3 = 1


001010_00000_00010_0000000000000000    // Memory[r0+0] = r2; Memory[0] = 22
110010_00000_11111_0000000000000000    // r31 = Memory[r0+0]; r31 = 22


// addi: r0 = r0 + 4 = 0 + 4 = 4
// RegDst = 1, RegWrite = 1, ALUsrc = 0, ALUoperation = 010, memRead = 0, memWrite = 0, MemToReg = 0
instruction_fetch.instruction_memory.Memory[1] = 32'b000000_00000_00000_0000000000000100; 
						//   ------_  r0 _  r0 _       4
// sw: Memory[r1+0] = r0; Memory[0] = 4
// RegDst = x, RegWrite = 0, ALUsrc = 0, ALUoperation = 010, memRead = 0, memWrite = 1, MemToReg = x
instruction_fetch.instruction_memory.Memory[2] = 32'b000000_00001_00000_0000000000000000;
						//   ------_  r1 _  r0 _       0
// lw: r1 = Memory[r1+0] = Memory[0] = 4
// RegDst = 1, RegWrite = 1, ALUsrc = 0, ALUoperation = 010, memRead = 1, memWrite = 0, MemToReg = 1
instruction_fetch.instruction_memory.Memory[3] = 32'b000000_00001_00001_0000000000000000;
						//   ------_  r1 _  r1 _       0
// add: r2 = r0 + r1 = 4 + 4 = 8
// RegDst = 0, RegWrite = 1, ALUsrc = 1, ALUoperation = 010, memRead = 0, memWrite = 0, MemToReg = 0
instruction_fetch.instruction_memory.Memory[4] = 32'b000000_00000_00001_00010_00000_000000;
						//   ------_  r0 _  r1 _  r2 _ -----------

// jump: to address 22*4
// jump = 1'b1; branch = 1'b0; ALUoperation = 3'bxxx
instruction_fetch.instruction_memory.Memory[1] = 32'b000000_00000000000000000000010110; 

// beq: r0 == r1? jump to +3
// jump = 1'b0; branch = 1'b1; ALUoperation = 3'b110
instruction_fetch.instruction_memory.Memory[22] = 32'b000000_00000_00001_00000000000011; 


// addi: r1 = r1 + 10 = 0 + 10 = 10
instruction_fetch.instruction_memory.Memory[1] = 32'b001000_00001_00001_0000000000001010; 
// addi: r2 = r2 + 10 = 0 + 10 = 10
instruction_fetch.instruction_memory.Memory[2] = 32'b001000_00010_00010_0000000000001010; 
// add: r3 = r1 + r2; 10 + 10 = 20
instruction_fetch.instruction_memory.Memory[3] = 32'b000000_00001_00010_00011_00000_100000; 
// sw: Memory[r0+0] = r3; Memory[0] = 20
instruction_fetch.instruction_memory.Memory[4] = 32'b101011_00000_00011_0000000000000000; 
// beq: r1 == r2? jump to +3
instruction_fetch.instruction_memory.Memory[5] = 32'b000100_00001_00010_0000000000000011; 
// j: jump to 100x4
instruction_fetch.instruction_memory.Memory[9] = 32'b000010_00000000000000000001100100; 
// lw: r4 = Memory[r0+0] = Memory[0] = 20
instruction_fetch.instruction_memory.Memory[100] = 32'b100011_00000_00100_0000000000000000; 
// and: r5 = r3 & r4 = 20 & 20 = 0
instruction_fetch.instruction_memory.Memory[101] = 32'b000000_00011_00100_00101_00000_100100; 


addi r0, r0, 0        // initialize 0
// instruction_memory.Memory[1] = 32'b001000_00000_00000_0000000000000000; 
addi r1, r1, 1        // initialize 1
// instruction_memory.Memory[2] = 32'b001000_00001_00001_0000000000000001;
addi r31, r31, 0      // address = 0
// instruction_memory.Memory[3] = 32'b001000_11111_11111_0000000000000000;
sw r0, r31(0)         // A[0] = 0
// instruction_memory.Memory[4] = 32'b101011_11111_00000_0000000000000000;
addi r31, r31, 4      // next base address
// instruction_memory.Memory[5] = 32'b001000_11111_11111_0000000000000100;
sw r1, r31(0)         // A[1] = 1
// instruction_memory.Memory[6] = 32'b101011_11111_00001_0000000000000000;
addi r3, r3, 0        // i = 0
// instruction_memory.Memory[7] = 32'b001000_00011_00011_0000000000000000;
addi r4, r4, 31        // since we don't have slti
// instruction_memory.Memory[8] = 32'b001000_00100_00100_0000000000011111;
for:
    beq r3, r4, end_loop  // loop while i < 31
// instruction_memory.Memory[9] = 32'b000100_00011_00100_0000000000000111; 
    add r5, r0, r1        // r5 = A[i-1] + A[i-2]
// instruction_memory.Memory[10] = 32'b000000_00000_00001_00101_00000_100000;
    addi r31, r31, 4      // next base address
// instruction_memory.Memory[11] = 32'b001000_11111_11111_0000000000000100;
    sw r5, r31(0)         // A[i] = r5
// instruction_memory.Memory[12] = 32'b101011_11111_00101_0000000000000000;
    addi r0, r1, 0        // r0 = r1
// instruction_memory.Memory[13] = 32'b001000_00001_00000_0000000000000000;
    addi r1, r5, 0        // r1 = r5
// instruction_memory.Memory[14] = 32'b001000_00101_00001_0000000000000000;
    addi r3, r3, 1        // i += 1
// instruction_memory.Memory[15] = 32'b001000_00011_00011_0000000000000001;
    j for                 // next interation
// instruction_memory.Memory[16] = 32'b000010_00000000000000000000001001;
end_loop









   

